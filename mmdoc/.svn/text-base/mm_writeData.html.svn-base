<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
  <title>Description of mm_writeData</title>
  <meta name="keywords" content="mm_writeData">
  <meta name="description" content="====================================================================">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="generator" content="m2html &copy; 2003 Guillaume Flandin">
  <meta name="robots" content="index, follow">
  <link type="text/css" rel="stylesheet" href="../m2html.css">
</head>
<body>
<a name="_top"></a>
<table width="100%"><tr><td align="left"><a href="../index.html"><img alt="<" border="0" src="../left.png">&nbsp;Master index</a></td>
<td align="right"><a href="index.html">Index for .&nbsp;<img alt=">" border="0" src="../right.png"></a></td></tr></table>
<h1>mm_writeData
</h1>


<h2><a name="_name"></a>NAME <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>====================================================================</strong></div>

<h2><a name="_synopsis"></a>SYNOPSIS <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>function varargout = mm_writeData(varargin) </strong></div>

<h2><a name="_description"></a>DESCRIPTION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre class="comment">====================================================================
 This package was developped by Ferath Kherif primarily
 with some help from Jean-Baptiste Poline.
 
 Please do not distribute and redirect requests for the toolbox to 
 us. For bugs, remarks, additions, etc, please contact jb at 
 poline@shfj.cea.fr. 
====================================================================
 WARNING : THIS SOFTWARE IS DISTRIBUTED FREE WITHOUT ANY GUARANTY ! 
====================================================================
</pre></div>

<!-- crossreference -->
<h2><a name="_cross"></a>CROSS-REFERENCE INFORMATION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
This function calls:
<ul style="list-style-image:url(../matlabicon.gif)">
</ul>
This function is called by:
<ul style="list-style-image:url(../matlabicon.gif)">
</ul>
<!-- crossreference -->

<h2><a name="_subfunctions"></a>SUBFUNCTIONS <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<ul style="list-style-image:url(../matlabicon.gif)">
<li><a href="#_sub1" class="code">function Eig = sf_writeData_mlm(cwd, nbsub, Nvox, Pimg, Res, Mask, NF, u, s, fname, h);</a></li>
<li><a href="#_sub2" class="code">function Eig = sf_writeData_svd(cwd, nbsub, Nvox, Pimg, Res, Mask, NF,</a></li>
</ul>

<h2><a name="_source"></a>SOURCE CODE <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre>0001 <a name="_sub0" href="#_subfunctions" class="code">function varargout = mm_writeData(varargin)</a>
0002 <span class="comment">%====================================================================</span>
0003 <span class="comment">% This package was developped by Ferath Kherif primarily</span>
0004 <span class="comment">% with some help from Jean-Baptiste Poline.</span>
0005 <span class="comment">%</span>
0006 <span class="comment">% Please do not distribute and redirect requests for the toolbox to</span>
0007 <span class="comment">% us. For bugs, remarks, additions, etc, please contact jb at</span>
0008 <span class="comment">% poline@shfj.cea.fr.</span>
0009 <span class="comment">%====================================================================</span>
0010 <span class="comment">% WARNING : THIS SOFTWARE IS DISTRIBUTED FREE WITHOUT ANY GUARANTY !</span>
0011 <span class="comment">%====================================================================</span>
0012 
0013 <span class="keyword">if</span> nargin
0014     typeAnal = varargin{1}
0015 <span class="keyword">else</span> 
0016     error(<span class="string">'no input argument in mm_model'</span>)
0017 <span class="keyword">end</span>
0018 
0019 
0020 <span class="keyword">switch</span> typeAnal
0021     <span class="keyword">case</span> <span class="string">'MLM'</span>
0022         Eig         = <a href="#_sub1" class="code" title="subfunction Eig = sf_writeData_mlm(cwd, nbsub, Nvox, Pimg, Res, Mask, NF, u, s, fname, h);">sf_writeData_mlm</a>(varargin{2:nargin});
0023         varargout     = {Eig};
0024         <span class="comment">% varargin    = {cwd, nbsub, Nvox, Pimg, Res, Mask, NF, u, s, fname, h};</span>
0025 
0026     <span class="keyword">case</span> <span class="string">'SVD'</span>
0027         Eig         = <a href="#_sub2" class="code" title="subfunction Eig = sf_writeData_svd(cwd, nbsub, Nvox, Pimg, Res, Mask, NF, ">sf_writeData_svd</a>(varargin{2:nargin});
0028         varargout     = {Eig};
0029         <span class="comment">% varargin    = {cwd, nbsub, Nvox, Pimg, Res, Mask, NF, ...</span>
0030         <span class="comment">%           u, ds, fname, h, Filter, paramsAnal}</span>
0031         
0032     <span class="keyword">otherwise</span>
0033         error(<span class="string">'unknown type of analysis'</span>)
0034 <span class="keyword">end</span>
0035         
0036 
0037 <span class="comment">%===================================================================</span>
0038 
0039 <a name="_sub1" href="#_subfunctions" class="code">function Eig = sf_writeData_mlm(cwd, nbsub, Nvox, Pimg, Res, Mask, NF, u, s, fname, h);</a>
0040 <span class="comment">% write eigenimages.</span>
0041 <span class="comment">%- Eig : filename of the eigen images.</span>
0042 <span class="comment">% Yout output images data</span>
0043 <span class="comment">% Yout = u' Z/sqrt(ds(i)), u eigen vector, ds eigen values.</span>
0044 <span class="comment">% Yout = u' NF B/Res</span>
0045 <span class="comment">% FORMAT Eig = tt_writeData(cwd,nbsub, Nvox,Pimg, Res,Mask,NF,u,s,fname,h);</span>
0046 <span class="comment">%===================================================================</span>
0047   
0048   
0049   cwd
0050   2
0051   
0052   holds     = 0; <span class="comment">%- Interpolation method</span>
0053   [dimp tmp]     = size(Pimg{1});
0054   memchunk     = 2^24;
0055   sizeVox      = ceil((memchunk/dimp/8)) <span class="comment">% 8 = sizeof(double)</span>
0056   
0057   <span class="keyword">for</span> sub=1:nbsub
0058     
0059     V       = spm_vol(Pimg{sub});
0060     Vr         = spm_vol(Res{sub});
0061     dimx     = V(1).dim(1);
0062     dimy     = V(1).dim(2);
0063     Vm         = spm_vol(Mask{sub});
0064     nbp     = sizeVox/prod(V(1).dim(1:2));
0065     nbp     = min(max(1,round(nbp)),V(1).dim(3));
0066     Afname    = [];
0067     
0068     <span class="keyword">for</span> U=1:size(u,2)
0069       
0070       Afname     = [Afname; fullfile(cwd{sub}, <span class="keyword">...</span>
0071                  sprintf(<span class="string">'%s%03d.img'</span>,fname{sub},U))]; <span class="comment">% Eigenimage filename</span>
0072       UMGS(U)    = struct(  <span class="string">'fname'</span>,<span class="keyword">...</span>
0073          num2str(Afname(U,:)),<span class="keyword">...</span>
0074          <span class="string">'dim'</span>,  [V(sub).dim(1:3),spm_type(<span class="string">'float'</span>)],<span class="keyword">...</span>
0075          <span class="string">'mat'</span>,  V(sub).mat,<span class="keyword">...</span>
0076          <span class="string">'pinfo'</span>, V(sub).pinfo',<span class="keyword">...</span>
0077          <span class="string">'descrip'</span>, sprintf(<span class="string">'%s %d'</span>,<span class="string">'eigenimage'</span>,U) );
0078       UMGS(U)    = spm_create_image(UMGS(U)); <span class="comment">%- image structure.</span>
0079       
0080     <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0081     
0082     Eig{sub}    = Afname;
0083     
0084     <span class="keyword">for</span> p = 1:nbp:V(1).dim(3)
0085       
0086       endpl    = min(p+nbp-1,V(1).dim(3));    <span class="comment">% position of last plane in bunch</span>
0087       nb_plan     = endpl - p + 1;
0088       plm     = zeros(dimx*dimy,nb_plan);
0089       idp    = 1;
0090       
0091       <span class="keyword">for</span> n = p:endpl
0092         Ma    = spm_matrix([0 0 n]);
0093         iplm  = spm_slice_vol(Vm,Ma,Vm.dim(1:2),holds);
0094         plm(:,idp) = iplm(:);idp=idp+1;
0095       <span class="keyword">end</span>
0096       
0097       plm        = plm(:) &gt; 0;
0098       nvox       = sum(plm); <span class="comment">% nombre de voxel</span>
0099       Nvox(sub) = Nvox(sub) + nvox;
0100       
0101       <span class="keyword">if</span> nvox
0102         
0103         BETAp   = zeros(floor(nvox),dimp);
0104         RES        = zeros(floor(nvox),1);
0105         
0106         <span class="keyword">for</span> t = 1:dimp
0107           plb      = zeros(dimx*dimy,nb_plan);
0108           plr     = zeros(dimx*dimy,nb_plan);
0109           idp    = 1;
0110           <span class="keyword">for</span> n = p:endpl
0111             Ma        = spm_matrix([0 0 n]);
0112             iplb      = spm_slice_vol(V(t),Ma,V(t).dim(1:2),holds);
0113             plb(:,idp)     = iplb(:);
0114             iplr      = spm_slice_vol(Vr,Ma,Vr.dim(1:2),holds);
0115             plr(:,idp)     = iplr(:);
0116         idp        = idp + 1;
0117           <span class="keyword">end</span>
0118           plb        = plb(:);
0119           BETAp(:,t)       = plb(find(plm));
0120           plr        = plr(:);
0121           RES         = sqrt(plr(find(plm)));
0122       <span class="keyword">end</span>
0123   
0124       <span class="keyword">end</span> <span class="comment">% if nvox</span>
0125 
0126       <span class="keyword">for</span> U=1:size(u,2)
0127         
0128     Yout = zeros(dimx*dimy*nb_plan,1);
0129         <span class="keyword">if</span> nvox
0130           Yout(plm)= ((NF*BETAp')./(ones(h,1)*RES'))'*u(:,U)/sqrt(s(U,U));
0131         <span class="keyword">end</span>
0132         i_plm    = 0;
0133         <span class="keyword">for</span> ip = p:endpl
0134           img     = reshape(Yout([1:dimx*dimy] + i_plm*dimx*dimy),dimx,dimy);
0135           spm_write_plane(UMGS(U),img,ip);
0136           i_plm = i_plm + 1;
0137         <span class="keyword">end</span>
0138         
0139       <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0140       
0141     <span class="keyword">end</span> <span class="comment">% for p = 1:nbp:V(1).dim(3)</span>
0142     
0143 <span class="keyword">end</span>
0144 
0145 
0146 <span class="comment">%===================================================================</span>
0147 
0148 <a name="_sub2" href="#_subfunctions" class="code">function Eig = sf_writeData_svd(cwd, nbsub, Nvox, Pimg, Res, Mask, NF, </a><span class="keyword">...</span>
0149                 u, ds, fname, h, Filter, paramsAnal);
0150 <span class="comment">%===================================================================</span>
0151   
0152   
0153 holds     = 0; <span class="comment">%- Interpolation method</span>
0154 [dimp tmp]     = size(Pimg);
0155 memchunk     = 2^24;
0156 sizeVox      = ceil((memchunk/dimp/8)) <span class="comment">% 8 = sizeof(double)</span>
0157   
0158     
0159 V       = spm_vol(Pimg);
0160 Vr     = spm_vol(Res);
0161 dimx     = V(1).dim(1);
0162 dimy     = V(1).dim(2);
0163 Vm     = spm_vol(Mask);
0164 nbp     = sizeVox/prod(V(1).dim(1:2));
0165 nbp     = min(max(1,round(nbp)),V(1).dim(3));
0166 Afname    = [];
0167     
0168     
0169 <span class="keyword">for</span> U=1:size(u,2)
0170       
0171       Afname     = [Afname; fullfile(cwd, <span class="keyword">...</span>
0172                  sprintf(<span class="string">'%s%03d.img'</span>,fname,U))]; <span class="comment">% Eigenimage filename</span>
0173       UMGS(U)    = struct( <span class="keyword">...</span>
0174            <span class="string">'fname'</span>,    num2str(Afname(U,:)),<span class="keyword">...</span>
0175          <span class="string">'dim'</span>,      [V(1).dim(1:3),spm_type(<span class="string">'float'</span>)],<span class="keyword">...</span>
0176          <span class="string">'mat'</span>,      V(1).mat,<span class="keyword">...</span>
0177          <span class="string">'pinfo'</span>,     V(1).pinfo',<span class="keyword">...</span>
0178          <span class="string">'descrip'</span>,     sprintf(<span class="string">'%s %d'</span>,<span class="string">'eigenimage'</span>,U) );
0179       UMGS(U)    = spm_create_image(UMGS(U)); <span class="comment">%- image structure.</span>
0180       
0181 <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0182     
0183 Eig    = Afname;
0184     
0185 <span class="keyword">for</span> p = 1:nbp:V(1).dim(3)
0186       
0187       endpl    = min(p+nbp-1,V(1).dim(3));    <span class="comment">% position of last plane in bunch</span>
0188       nb_plan     = endpl - p + 1;
0189       plm     = zeros(dimx*dimy,nb_plan);
0190       idp    = 1;
0191       
0192       <span class="keyword">for</span> n = p:endpl
0193         Ma        = spm_matrix([0 0 n]);
0194         iplm      = spm_slice_vol(Vm,Ma,Vm.dim(1:2),holds);
0195         plm(:,idp) = iplm(:);idp=idp+1;
0196       <span class="keyword">end</span>
0197       
0198       plm        = plm(:) &gt; 0;
0199       nvox       = sum(plm); <span class="comment">% nombre de voxel</span>
0200       Nvox    = Nvox + nvox;
0201       
0202       <span class="keyword">if</span> nvox
0203         
0204         BETAp   = zeros(floor(nvox),dimp);
0205         RES        = zeros(floor(nvox),1);
0206         
0207         <span class="keyword">for</span> t = 1:dimp
0208           plb      = zeros(dimx*dimy,nb_plan);
0209           plr     = zeros(dimx*dimy,nb_plan);
0210           idp    = 1;
0211           <span class="keyword">for</span> n = p:endpl
0212             Ma        = spm_matrix([0 0 n]);
0213             iplb      = spm_slice_vol(V(t),Ma,V(t).dim(1:2),holds);
0214             plb(:,idp)     = iplb(:);
0215             iplr      = spm_slice_vol(Vr,Ma,Vr.dim(1:2),holds);
0216             plr(:,idp)     = iplr(:);
0217         idp        = idp + 1;
0218           <span class="keyword">end</span>
0219           plb        = plb(:);
0220           BETAp(:,t)       = plb(find(plm));
0221           plr        = plr(:);
0222           RES         = sqrt(plr(find(plm)));
0223       <span class="keyword">end</span>
0224   
0225       <span class="keyword">end</span> <span class="comment">% if nvox</span>
0226 
0227       <span class="keyword">for</span> U=1:size(u,2)
0228         
0229     Yout = zeros(dimx*dimy*nb_plan,1);
0230         <span class="keyword">if</span> nvox
0231       <span class="keyword">if</span> paramsAnal.temporalFilter
0232          BETA    = spm_filter(<span class="string">'apply'</span>,Filter,BETAp');
0233       <span class="keyword">end</span>
0234       <span class="keyword">if</span> paramsAnal.divideByRessd
0235          BETA    = ((NF*BETA)./(ones(h,1)*RES'))';
0236       <span class="keyword">end</span>
0237           Yout(plm)    = BETA*u(:,U)/sqrt(ds(U));  
0238       <span class="keyword">end</span>
0239   
0240         i_plm    = 0;
0241         <span class="keyword">for</span> ip = p:endpl
0242           img     = reshape(Yout([1:dimx*dimy] + i_plm*dimx*dimy),dimx,dimy);
0243           spm_write_plane(UMGS(U),img,ip);
0244           i_plm = i_plm + 1;
0245         <span class="keyword">end</span>
0246         
0247       <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0248       
0249 <span class="keyword">end</span> <span class="comment">% for p = 1:nbp:V(1).dim(3)</span>
0250 
0251 
0252 
0253 
</pre></div>

<hr><address>Generated at 14:28:16 27-Aug-2003 by <strong><a href="http://www.madic.org/download/matlab/m2html/">m2html</a></strong> &copy; 2003</address>
</body>
</html>
