<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
                "http://www.w3.org/TR/REC-html40/loose.dtd">
<html>
<head>
  <title>Description of mm_writeEigImg</title>
  <meta name="keywords" content="mm_writeEigImg">
  <meta name="description" content="Write Eigen Images">
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <meta name="generator" content="m2html &copy; 2003 Guillaume Flandin">
  <meta name="robots" content="index, follow">
  <link type="text/css" rel="stylesheet" href="../m2html.css">
</head>
<body>
<a name="_top"></a>
<table width="100%"><tr><td align="left"><a href="../index.html"><img alt="<" border="0" src="../left.png">&nbsp;Master index</a></td>
<td align="right"><a href="index.html">Index for .&nbsp;<img alt=">" border="0" src="../right.png"></a></td></tr></table>
<h1>mm_writeEigImg
</h1>


<h2><a name="_name"></a>NAME <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>Write Eigen Images</strong></div>

<h2><a name="_synopsis"></a>SYNOPSIS <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="box"><strong>function varargout = mm_writeEigImg(varargin) </strong></div>

<h2><a name="_description"></a>DESCRIPTION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre class="comment"> Write Eigen Images
 Format varargout = mm_writeEigImg(varargin)
 see sub-functions for details.
================================================================================
-  Copyright (C) 1997-2002 CEA
-  This software and supporting documentation were developed by
-       CEA/DSV/SHFJ/UNAF
-       4 place du General Leclerc
-       91401 Orsay cedex
-       France
================================================================================
</pre></div>

<!-- crossreference -->
<h2><a name="_cross"></a>CROSS-REFERENCE INFORMATION <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
This function calls:
<ul style="list-style-image:url(../matlabicon.gif)">
</ul>
This function is called by:
<ul style="list-style-image:url(../matlabicon.gif)">
<li><a href="MM.html" class="code" title="function  MM(typeAnal,argfile)">MM</a>	Multivariate Methods. General multivariate tool.</li>
</ul>
<!-- crossreference -->

<h2><a name="_subfunctions"></a>SUBFUNCTIONS <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<ul style="list-style-image:url(../matlabicon.gif)">
<li><a href="#_sub1" class="code">function Eig = sf_writeEigImg_mlm(cwd, nbsub, Pimg, Res, Mask, NF, u, ds, fname, h);</a></li>
<li><a href="#_sub2" class="code">function Eig = sf_writeEigImg_svd(cwd, nbsub, Pimg, Res, Mask, NF,</a></li>
</ul>

<h2><a name="_source"></a>SOURCE CODE <a href="#_top"><img alt="^" border="0" src="../up.png"></a></h2>
<div class="fragment"><pre>0001 <a name="_sub0" href="#_subfunctions" class="code">function varargout = mm_writeEigImg(varargin)</a>
0002 <span class="comment">% Write Eigen Images</span>
0003 <span class="comment">% Format varargout = mm_writeEigImg(varargin)</span>
0004 <span class="comment">% see sub-functions for details.</span>
0005 <span class="comment">%================================================================================</span>
0006 <span class="comment">%-  Copyright (C) 1997-2002 CEA</span>
0007 <span class="comment">%-  This software and supporting documentation were developed by</span>
0008 <span class="comment">%-       CEA/DSV/SHFJ/UNAF</span>
0009 <span class="comment">%-       4 place du General Leclerc</span>
0010 <span class="comment">%-       91401 Orsay cedex</span>
0011 <span class="comment">%-       France</span>
0012 <span class="comment">%================================================================================</span>
0013 
0014 
0015 
0016 
0017 
0018 <span class="keyword">if</span> nargin
0019     typeAnal = varargin{1};
0020 <span class="keyword">else</span> 
0021     error(<span class="string">'no input argument in mm_model'</span>)
0022 <span class="keyword">end</span>
0023 
0024 
0025 <span class="keyword">switch</span> typeAnal
0026     <span class="keyword">case</span> <span class="string">'MLM'</span>
0027         Eig         = <a href="#_sub1" class="code" title="subfunction Eig = sf_writeEigImg_mlm(cwd, nbsub, Pimg, Res, Mask, NF, u, ds, fname, h);">sf_writeEigImg_mlm</a>(varargin{2:nargin});
0028         varargout     = {Eig};
0029         <span class="comment">% varargin    = {cwd, nbsub, Pimg, Res, Mask, NF, u, s, fname, h};</span>
0030 
0031     <span class="keyword">case</span> <span class="string">'SVD'</span>
0032         Eig         = <a href="#_sub2" class="code" title="subfunction Eig = sf_writeEigImg_svd(cwd, nbsub, Pimg, Res, Mask, NF, ">sf_writeEigImg_svd</a>(varargin{2:nargin});
0033         varargout     = {Eig};
0034         <span class="comment">% varargin    = {cwd, nbsub, Pimg, Res, Mask, NF, ...</span>
0035         <span class="comment">%           u, ds, fname, h, Filter, paramsAnal}</span>
0036         
0037     <span class="keyword">otherwise</span>
0038         error(<span class="string">'unknown type of analysis'</span>)
0039 <span class="keyword">end</span>
0040         
0041 
0042 <span class="comment">%===================================================================</span>
0043 
0044 <a name="_sub1" href="#_subfunctions" class="code">function Eig = sf_writeEigImg_mlm(cwd, nbsub, Pimg, Res, Mask, NF, u, ds, fname, h);</a>
0045 <span class="comment">% write eigenimages.</span>
0046 <span class="comment">%- Eig : filename of the eigen images.</span>
0047 <span class="comment">% Yout output images data</span>
0048 <span class="comment">% Yout = u' Z/sqrt(ds(i)), u eigen vector, ds eigen values.</span>
0049 <span class="comment">% Yout = u' NF B/Res</span>
0050 <span class="comment">%===================================================================</span>
0051   
0052   
0053   holds     = 0; <span class="comment">%- Interpolation method</span>
0054   [dimp tmp]     = size(Pimg{1});
0055   memchunk     = 2^24;
0056   sizeVox      = ceil((memchunk/dimp/8)); <span class="comment">% 8 = sizeof(double)</span>
0057   
0058   <span class="keyword">for</span> sub=1:nbsub
0059     
0060     V       = spm_vol(Pimg{sub});
0061     Vr         = spm_vol(Res{sub});
0062     dimx     = V(1).dim(1);
0063     dimy     = V(1).dim(2);
0064     Vm         = spm_vol(Mask{sub});
0065     nbp     = sizeVox/prod(V(1).dim(1:2));
0066     nbp     = min(max(1,round(nbp)),V(1).dim(3));
0067     Afname    = [];
0068     
0069     <span class="keyword">for</span> U=1:size(u,2)
0070       
0071       Afname     = [Afname; fullfile(cwd{sub}, <span class="keyword">...</span>
0072                  sprintf(<span class="string">'%s%03d.img'</span>,fname{sub},U))]; <span class="comment">% Eigenimage filename</span>
0073       UMGS(U)    = struct(  <span class="string">'fname'</span>,<span class="keyword">...</span>
0074          num2str(Afname(U,:)),<span class="keyword">...</span>
0075          <span class="string">'dim'</span>,  [V(1).dim(1:3),spm_type(<span class="string">'float'</span>)],<span class="keyword">...</span>
0076          <span class="string">'mat'</span>,  V(1).mat,<span class="keyword">...</span>
0077          <span class="string">'pinfo'</span>, V(1).pinfo',<span class="keyword">...</span>
0078          <span class="string">'descrip'</span>, sprintf(<span class="string">'%s %d'</span>,<span class="string">'eigenimage'</span>,U) );
0079       UMGS(U)    = spm_create_image(UMGS(U)); <span class="comment">%- image structure.</span>
0080       
0081     <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0082     
0083     Eig{sub}    = Afname;
0084     
0085     <span class="keyword">for</span> p = 1:nbp:V(1).dim(3)
0086       
0087       plank=length(p:min(p+nbp,V(1).dim(3)));
0088       endpl    = min(p+nbp-1,V(1).dim(3));    <span class="comment">% position of last plane in bunch</span>
0089       nb_plan     = endpl - p + 1;
0090       plm     = zeros(dimx*dimy,nb_plan);
0091       idp    = 1;
0092       fprintf(<span class="string">'\r%-20s: '</span>,sprintf(<span class="string">'Plane %3d/%-3d '</span>,<span class="keyword">...</span>
0093       p,V(1).dim(3)))
0094       fprintf(<span class="string">'%20s'</span>,<span class="string">' Reading Mask '</span>);  
0095       
0096       <span class="keyword">for</span> n = p:endpl
0097         fprintf(<span class="string">'%-20s'</span>,sprintf(<span class="string">'plank %3d/%-3d'</span>,<span class="keyword">...</span>
0098             idp,plank))
0099         fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0100     
0101     Ma    = spm_matrix([0 0 n]);
0102         iplm  = spm_slice_vol(Vm,Ma,Vm.dim(1:2),holds);
0103         plm(:,idp) = iplm(:);idp=idp+1;
0104       <span class="keyword">end</span>
0105       
0106       plm        = plm(:) &gt; 0;
0107       nvox       = sum(plm); <span class="comment">% nombre de voxel</span>
0108       
0109       <span class="keyword">if</span> nvox
0110         
0111         BETAp   = zeros(floor(nvox),dimp);
0112         RES        = zeros(floor(nvox),1);
0113     
0114     fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0115        fprintf(<span class="string">'%20s'</span>,<span class="string">' Reading data '</span>)
0116         
0117         <span class="keyword">for</span> t = 1:dimp
0118           plb      = zeros(dimx*dimy,nb_plan);
0119           plr     = zeros(dimx*dimy,nb_plan);
0120           idp    = 1;
0121           <span class="keyword">for</span> n = p:endpl
0122           
0123        fprintf(<span class="string">'%-20s'</span>,sprintf(<span class="string">'plank %3d/%-3d'</span>,<span class="keyword">...</span>
0124        idp,plank))
0125        fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0126             Ma        = spm_matrix([0 0 n]);
0127             iplb      = spm_slice_vol(V(t),Ma,V(t).dim(1:2),holds);
0128             plb(:,idp)     = iplb(:);
0129             iplr      = spm_slice_vol(Vr,Ma,Vr.dim(1:2),holds);
0130             plr(:,idp)     = iplr(:);
0131         idp        = idp + 1;
0132           <span class="keyword">end</span>
0133           plb        = plb(:);
0134           BETAp(:,t)       = plb(find(plm));
0135           plr        = plr(:);
0136           RES         = sqrt(plr(find(plm)));
0137       <span class="keyword">end</span>
0138   
0139       <span class="keyword">end</span> <span class="comment">% if nvox</span>
0140 
0141       <span class="keyword">for</span> U=1:size(u,2)
0142         fprintf(<span class="string">'%20s'</span>,sprintf(<span class="string">' writing Img %d'</span>,U));
0143     Yout = zeros(dimx*dimy*nb_plan,1);
0144         <span class="keyword">if</span> nvox
0145           Yout(plm)= ((NF*BETAp')./(ones(h,1)*RES'))'*u(:,U)/sqrt(ds(U));
0146         <span class="keyword">end</span>
0147         i_plm    = 0;
0148         <span class="keyword">for</span> ip = p:endpl
0149           img     = reshape(Yout([1:dimx*dimy] + i_plm*dimx*dimy), dimx, dimy);
0150           spm_write_plane(UMGS(U),img,ip);
0151           i_plm = i_plm + 1;
0152         <span class="keyword">end</span>
0153         fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0154       <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0155       
0156     <span class="keyword">end</span> <span class="comment">% for p = 1:nbp:V(1).dim(3)</span>
0157     
0158 <span class="keyword">end</span>
0159 fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,80))
0160 fprintf(<span class="string">'%s\r'</span>,sprintf(<span class="string">' '</span>)*ones(1,80))
0161 
0162 
0163 <span class="comment">%===================================================================</span>
0164 
0165 <a name="_sub2" href="#_subfunctions" class="code">function Eig = sf_writeEigImg_svd(cwd, nbsub, Pimg, Res, Mask, NF, </a><span class="keyword">...</span>
0166                 u, ds, fname, h, Filter, paramsAnal,gsf);
0167 <span class="comment">%===================================================================</span>
0168   
0169   
0170 holds         = 0; <span class="comment">%- Interpolation method</span>
0171 [dimt tmp]     = size(Pimg{1});
0172 memchunk     = 2^24;
0173 sizeVox      = ceil((memchunk/dimt/8)); <span class="comment">% 8 = sizeof(double)</span>
0174 
0175 
0176 
0177 <span class="keyword">for</span> sub=1:nbsub
0178 
0179    
0180    V       = spm_vol(Pimg{sub});
0181    Vr     = spm_vol(Res{sub});
0182    dimx     = V(1).dim(1);
0183    dimy     = V(1).dim(2);
0184    Vm     = spm_vol(Mask{sub});
0185    nbp     = sizeVox/prod(V(1).dim(1:2));
0186    nbp     = min(max(1,round(nbp)),V(1).dim(3));
0187    Afname    = [];
0188    
0189     sf=gsf{sub}; <span class="comment">%scaling factor for the subject sub</span>
0190        fprintf(<span class="string">'\nworking on space domain : %d \n'</span>,sub);
0191       <span class="keyword">for</span> v=1:dimt
0192         V(v,1).pinfo(1:2,:) = V(v,1).pinfo(1:2,:)*sf(v,1);
0193       <span class="keyword">end</span>
0194 
0195    <span class="keyword">for</span> U=1:size(u,2)
0196       
0197       Afname     = [Afname; fullfile(cwd{sub}, <span class="keyword">...</span>
0198                  sprintf(<span class="string">'%s%03d.img'</span>,fname{sub},U))]; <span class="comment">% Eigenimage filename</span>
0199       UMGS(U)    = struct( <span class="keyword">...</span>
0200            <span class="string">'fname'</span>,    num2str(Afname(U,:)),<span class="keyword">...</span>
0201          <span class="string">'dim'</span>,      [V(1).dim(1:3),spm_type(<span class="string">'float'</span>)],<span class="keyword">...</span>
0202          <span class="string">'mat'</span>,      V(1).mat,<span class="keyword">...</span>
0203          <span class="string">'pinfo'</span>,     V(1).pinfo',<span class="keyword">...</span>
0204          <span class="string">'descrip'</span>,     sprintf(<span class="string">'%s %d'</span>,<span class="string">'eigenimage'</span>,U) );
0205       UMGS(U)    = spm_create_image(UMGS(U)); <span class="comment">%- image structure.</span>
0206       
0207    <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0208     
0209    Eig{sub}    = Afname;
0210     
0211    <span class="keyword">for</span> p = 1:nbp:V(1).dim(3)
0212 
0213       
0214       plank=length(p:min(p+nbp,V(1).dim(3)));
0215       endpl    = min(p+nbp-1,V(1).dim(3));    <span class="comment">% position of last plane in bunch</span>
0216       nb_plan     = endpl - p + 1;
0217       plm     = zeros(dimx*dimy,nb_plan);
0218       idp    = 1;
0219       fprintf(<span class="string">'\r%-20s: '</span>,sprintf(<span class="string">'Plane %3d/%-3d '</span>,<span class="keyword">...</span>
0220       p,V(1).dim(3)))
0221       fprintf(<span class="string">'%20s'</span>,<span class="string">' Reading Mask '</span>);
0222       <span class="keyword">for</span> n = p:endpl
0223     fprintf(<span class="string">'%-20s'</span>,sprintf(<span class="string">'plank %3d/%-3d'</span>,<span class="keyword">...</span>
0224             idp,plank))
0225         fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0226         Ma        = spm_matrix([0 0 n]);
0227         iplm      = spm_slice_vol(Vm,Ma,Vm.dim(1:2),holds);
0228         plm(:,idp) = iplm(:);idp=idp+1;
0229       <span class="keyword">end</span>
0230       
0231       plm        = plm(:) &gt; 0;
0232       nvox       = sum(plm); <span class="comment">% nombre de voxel</span>
0233       
0234       <span class="keyword">if</span> nvox
0235         
0236         BETA   = zeros(dimt, floor(nvox));
0237         RES        = zeros(floor(nvox),1);
0238     fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0239        fprintf(<span class="string">'%20s'</span>,<span class="string">' Reading data '</span>)
0240         
0241         <span class="keyword">for</span> t = 1:dimt
0242           plb      = zeros(dimx*dimy,nb_plan);
0243           plr     = zeros(dimx*dimy,nb_plan);
0244           idp    = 1;
0245           <span class="keyword">for</span> n = p:endpl
0246         fprintf(<span class="string">'%-20s'</span>,sprintf(<span class="string">'plank %3d/%-3d'</span>,<span class="keyword">...</span>
0247        idp,plank))
0248        fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0249             Ma        = spm_matrix([0 0 n]);
0250             iplb      = spm_slice_vol(V(t),Ma,V(t).dim(1:2),holds);
0251             plb(:,idp)     = iplb(:);
0252             iplr      = spm_slice_vol(Vr,Ma,Vr.dim(1:2),holds);
0253             plr(:,idp)     = iplr(:);
0254         idp        = idp + 1;
0255           <span class="keyword">end</span>
0256           plb        = plb(:);
0257           BETA(t,:)       = plb(find(plm))';
0258           plr        = plr(:);
0259           RES         = sqrt(plr(find(plm)));
0260       <span class="keyword">end</span>
0261   
0262       <span class="keyword">end</span> <span class="comment">% if nvox</span>
0263 
0264       <span class="keyword">for</span> U=1:size(u,2)
0265         fprintf(<span class="string">'%20s'</span>,sprintf(<span class="string">' writing Img %d'</span>,U));
0266     Yout = zeros(dimx*dimy*nb_plan,1);
0267         <span class="keyword">if</span> nvox
0268       <span class="keyword">if</span> paramsAnal.temporalFilter
0269          BETA    = spm_filter(<span class="string">'apply'</span>,Filter,BETA);
0270       <span class="keyword">end</span>
0271       <span class="keyword">if</span> paramsAnal.divideByRessd
0272          <span class="comment">%BETA    = (NF*BETA)./(ones(h,1)*RES');</span>
0273          BETA    = (BETA)./(ones(h,1)*RES');
0274       <span class="keyword">end</span>
0275           Yout(plm)    = u(:,U)'*BETA/sqrt(ds(U));  
0276           
0277     <span class="keyword">end</span>
0278     
0279   
0280         i_plm    = 0;
0281         <span class="keyword">for</span> ip = p:endpl
0282           img     = reshape(Yout([1:dimx*dimy] + i_plm*dimx*dimy),dimx,dimy);
0283           spm_write_plane(UMGS(U),img,ip);
0284           i_plm = i_plm + 1;
0285         <span class="keyword">end</span>
0286         fprintf(<span class="string">'%s'</span>,sprintf(<span class="string">'\b'</span>)*ones(1,20))
0287       <span class="keyword">end</span> <span class="comment">% for U=1:size(u,2)</span>
0288       
0289    <span class="keyword">end</span> <span class="comment">% for p = 1:nbp:V(1).dim(3)</span>
0290 <span class="keyword">end</span> 
0291 
0292 
0293 
</pre></div>

<hr><address>Generated at 14:28:16 27-Aug-2003 by <strong><a href="http://www.madic.org/download/matlab/m2html/">m2html</a></strong> &copy; 2003</address>
</body>
</html>
